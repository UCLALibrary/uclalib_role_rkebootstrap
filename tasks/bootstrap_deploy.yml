---

# Calico CNI Configuration
#---------------------------------------------------------
- name: "Enable automatic host endpoint in Calico on cluster: {{ item.item }}"
  shell: |
    kubectl patch KubeControllersConfiguration default --type=merge --patch='{"spec": {"controllers": {"node": {"hostEndpoint": {"autoCreate": "Enabled"}}}}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "Adjust FelixConfiguration to disable fail safe inbound ports on cluster: {{ item.item }}"
  shell: |
    kubectl patch FelixConfiguration default --type=merge --patch='{"spec": {"failsafeInboundHostPorts": []}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

#  Install cert-manager
#---------------------------------------------------------
- name: "Install cert-manager helm chart on cluster: {{ item.item }}"
  shell: |
    helm repo add jetstack "{{ cert_manager_repo }}"
    helm upgrade --install --version "{{ cert_manager_version }}" -n cert-manager --create-namespace cert-manager jetstack/cert-manager --set installCRDs=true
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

# Install external secrets
#---------------------------------------------------------
- name: "Install external secrets helm chart on cluster: {{ item.item }}"
  shell: |
    helm repo add external-secrets "{{ external_secrets_repo }}"
    helm upgrade --install --version "{{ external_secrets_version }}" -n external-secrets --create-namespace external-secrets external-secrets/external-secrets
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

# Prep for CPI/CSI installation
#---------------------------------------------------------
- name: "Add node-role.kubernetes.io/control-plane label to all control plane nodes on cluster: {{ item.item }}"
  shell: |
    kubectl label nodes -l node-role.kubernetes.io/controlplane=true node-role.kubernetes.io/control-plane=true 
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

# Install/Configure vSphere Cloud Provider Interface (CPI)
#---------------------------------------------------------
- name: "CPI - Taint all nodes in the cluster: {{ item.item }}"
  shell: |
    kubectl taint nodes --all=true node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CPI - Deploy vSphere Cloud Provider Interface helm chart on cluster: {{ item.item }}"
  shell: |
    helm repo add vsphere-cpi {{ vsphere_cpi_repo | quote }}
    helm repo update
    helm upgrade --install vsphere-cpi vsphere-cpi/vsphere-cpi --namespace kube-system --set config.enabled=true --set config.vcenter={{ vcenter_fqdn | quote }} --set config.username={{ vcenter_username | quote }} --set config.password={{ vcenter_user_password | quote }} --set config.datacenter={{ vcenter_datacenter_name | quote }}
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  no_log: True
#---------------------------------------------------------

- name: "Pause for 2 minutes to let the Cloud Provider Interface Plug-in finish deploying on cluster: {{ item.item }}"
  pause:
    minutes: 2

# Install/Configure vSphere Container Storage Plug-in (CSI)
#---------------------------------------------------------
- name: "CSI - Create namespace resource for Container Storage Plug-in on cluster: {{ item.item }}"
  shell: |
    kubectl apply -f "{{ vsphere_csi_url }}/namespace.yaml"
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CSI - Taint all control plane nodes on cluster: {{ item.item }}"
  shell: |
    kubectl taint nodes -l node-role.kubernetes.io/controlplane=true node-role.kubernetes.io/control-plane=:NoSchedule
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CSI - Create temp directory for storing vSphere CSI configuration file on cluster: {{ item.item }}"
  tempfile:
    state: directory
    suffix: csibuild
  register: vsphere_config_tempdir

- name: "CSI - Create vSphere CSI configuration file on cluster: {{ item.item }}"
  template: 
    src: "csi-vsphere.conf.j2"
    dest: "{{ vsphere_config_tempdir.path }}/csi-vsphere.conf"

- name: "CSI - Create secret resource holding vSphere CSI configuration parameters on cluster: {{ item.item }}"
  shell: |
    kubectl create secret generic vsphere-config-secret --from-file={{ vsphere_config_tempdir.path }}/csi-vsphere.conf --namespace=vmware-system-csi
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CSI - Get number of control plane nodes in cluster on cluster: {{ item.item }}"
  shell: |
    kubectl get nodes -l node-role.kubernetes.io/controlplane=true -o name | wc -l
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  register: num_controlplane_nodes

- name: "CSI - Deploy vSphere Container Storage Plug-in on cluster: {{ item.item }}"
  shell: |
    kubectl apply -f "{{ vsphere_csi_url }}/vsphere-csi-driver.yaml"
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CSI - Patch vSphere Container Storage Plug-in deployment replica count on cluster: {{ item.item }}"
  shell: |
    kubectl --namespace=vmware-system-csi patch deployment vsphere-csi-controller --type=merge --patch='{"spec":{"replicas": {{ num_controlplane_nodes.stdout }}}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  when: num_controlplane_nodes.stdout != 3

- name: "CSI - Patch vSphere Container Storare Plug-in internal-feature-states ConfigMap on cluster: {{ item.item }}"
  shell: |
    kubectl --namespace=vmware-system-csi patch configmap internal-feature-states.csi.vsphere.vmware.com --type=merge --patch='{"data":{"improved-volume-topology": "false"}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CSI - Create vSphere Container Storage Plug-in StorageClass manifest file on cluster: {{ item.item }}"
  template:
    src: "vsphere_csi_storageclass.yml.j2"
    dest: "{{ vsphere_config_tempdir.path }}/vsphere_csi_storageclass.yml"

- name: "CSI - Deploy StorageClass using the vSphere Container Storage Plug-in on cluster: {{ item.item }}"
  shell: |
    kubectl apply -f "{{ vsphere_config_tempdir.path }}/vsphere_csi_storageclass.yml"
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CSI - Remove the vSphere CSI configuration temp directory on cluster: {{ item.item }}"
  file:
    path: "{{ vsphere_config_tempdir.path }}"
    state: absent
#---------------------------------------------------------

- name: "Pause for 2 minutes to let all Pods finish deploying on cluster: {{ item.item }}"
  pause:
    minutes: 2

- name: "Install rke bootstrap helm chart on cluster: {{ item.item }}"
  shell: |
    helm upgrade --install --version "{{ rke_bootstrap_version }}" -n uclabootstrap --create-namespace uclabootstrap /etc/ansible/files/rke_bootstrap \
    --set secrets.external_secrets.services.aws.access_key="{{ es_services_access_key }}" \
    --set secrets.external_secrets.services.aws.secret_access_key="{{ es_services_secret_access_key }}" \
    --set secrets.external_secrets.systems.aws.access_key="{{ es_systems_access_key }}" \
    --set secrets.external_secrets.systems.aws.secret_access_key="{{ es_systems_secret_access_key }}" \
    --set secrets.cert_manager.external.sectigo_acme.email="{{ sectigo_acme_email }}" \
    --set secrets.cert_manager.external.sectigo_acme.tls_key="{{ sectigo_acme_tls_key }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  no_log: True
