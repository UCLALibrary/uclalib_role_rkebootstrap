---

# Calico CNI Configuration
#---------------------------------------------------------
- name: "Enable automatic host endpoint in Calico on cluster: {{ item.item }}"
  shell: |
    kubectl patch KubeControllersConfiguration default --type=merge --patch='{"spec": {"controllers": {"node": {"hostEndpoint": {"autoCreate": "Enabled"}}}}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "Adjust FelixConfiguration to disable fail safe inbound ports on cluster: {{ item.item }}"
  shell: |
    kubectl patch FelixConfiguration default --type=merge --patch='{"spec": {"failsafeInboundHostPorts": []}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

#  Install cert-manager
#---------------------------------------------------------
- name: "Install cert-manager helm chart on cluster: {{ item.item }}"
  shell: |
    helm repo add jetstack "{{ cert_manager_repo }}"
    helm upgrade --install --version "{{ cert_manager_version }}" -n cert-manager --create-namespace cert-manager jetstack/cert-manager --set installCRDs=true
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

# Install external secrets
#---------------------------------------------------------
- name: "Install external secrets helm chart on cluster: {{ item.item }}"
  shell: |
    helm repo add external-secrets "{{ external_secrets_repo }}"
    helm upgrade --install --version "{{ external_secrets_version }}" -n external-secrets --create-namespace external-secrets external-secrets/external-secrets
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

# Install MetalLB
#---------------------------------------------------------
- name: "Install MetalLB helm chart on cluster: {{ item.item }}"
  shell: |
    helm repo add metallb "{{ metallb_repo }}"
    helm upgrade --install metallb metallb/metallb --namespace metallb-system --create-namespace
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------

# Prep for CPI/CSI installation
#---------------------------------------------------------
- name: "Create temp directory for storing vSphere installation and config files on cluster: {{ item.item }}"
  tempfile:
    state: directory
    suffix: csibuild
  register: vsphere_config_tempdir

- name: "Clone Rancher-specific vSphere CPI/CSI charts to install on cluster: {{ item.item }}"
  git: 
    repo: "{{ vsphere_cpi_csi_chart_url }}"
    dest: "{{ vsphere_config_tempdir.path }}/vsphere-charts"
#---------------------------------------------------------

# Deploy vSphere Cloud Provider Interface (CPI)
#---------------------------------------------------------
- name: "CPI - Taint all nodes in the cluster: {{ item.item }}"
  shell: |
    kubectl taint nodes --all=true node.cloudprovider.kubernetes.io/uninitialized=true:NoSchedule
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"

- name: "CPI - Deploy Rancher-specific vSphere Cloud Provider Interface helm chart on cluster: {{ item.item }}"
  shell: >
    helm upgrade --install vsphere-cpi {{ vsphere_config_tempdir.path }}/vsphere-charts/charts/rancher-vsphere-cpi 
    --namespace kube-system --set vCenter.host={{ vcenter_fqdn | quote }} --set vCenter.username={{ vcenter_username | quote }} 
    --set vCenter.password={{ vcenter_user_password | quote }} --set vCenter.datacenters={{ vcenter_datacenter_name | quote }}
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  no_log: True
#---------------------------------------------------------

- name: "Pause for 1 minute to let the Cloud Provider Interface Plug-in finish deploying on cluster: {{ item.item }}"
  pause:
    minutes: 1

# Deploy vSphere Container Storage Plug-in (CSI)
#---------------------------------------------------------
- name: "CSI - Get number of control plane nodes in cluster on cluster: {{ item.item }}"
  shell: |
    kubectl get nodes -l node-role.kubernetes.io/controlplane=true -o name | wc -l
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  register: num_controlplane_nodes

- name: "CSI - Deploy Rancher-specific vSphere Container Storage Interface helm chart on cluster: {{ item.item }}"
  shell: >
    helm upgrade --install vsphere-csi {{ vsphere_config_tempdir.path }}/vsphere-charts/charts/rancher-vsphere-csi --namespace {{ vsphere_csi_namespace }} --create-namespace
    --set vCenter.host={{ vcenter_fqdn | quote }} --set vCenter.clusterId={{ item.item }} --set vCenter.datacenters={{ vcenter_datacenter_name | quote }} 
    --set vCenter.username={{ vcenter_username | quote }} --set vCenter.password={{ vcenter_user_password | quote }}
    --set storageClass.datastoreURL={{ vcenter_datastore_url | quote }} --set storageClass.allowVolumeExpansion={{ vcenter_vol_expansion }}
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  no_log: True

- name: "CSI - Patch vSphere Container Storage Plug-in deployment replica count on cluster: {{ item.item }}"
  shell: |
    kubectl --namespace {{ vsphere_csi_namespace }} patch deployment vsphere-csi-controller --type=merge --patch='{"spec":{"replicas": {{ num_controlplane_nodes.stdout }}}}'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  when: num_controlplane_nodes.stdout != 3
#---------------------------------------------------------

# Clean-up for CPI/CSI installation
#---------------------------------------------------------
- name: "Remove temp directory for storing vSphere installation and config files on cluster: {{ item.item }}"
  file:
    path: "{{ vsphere_config_tempdir.path }}"
    state: absent
#---------------------------------------------------------

- name: "Pause for 1 minute to let all Pods finish deploying on cluster: {{ item.item }}"
  pause:
    minutes: 1

# Install RKE Bootstrap Helm Chart
#---------------------------------------------------------
- name: "Install rke bootstrap helm chart on cluster: {{ item.item }}"
  shell: |
    helm upgrade --install --version "{{ rke_bootstrap_version }}" -n uclabootstrap --create-namespace uclabootstrap /etc/ansible/files/rke_bootstrap \
    --set secrets.external_secrets.services.aws.access_key="{{ es_services_access_key }}" \
    --set secrets.external_secrets.services.aws.secret_access_key="{{ es_services_secret_access_key }}" \
    --set secrets.external_secrets.systems.aws.access_key="{{ es_systems_access_key }}" \
    --set secrets.external_secrets.systems.aws.secret_access_key="{{ es_systems_secret_access_key }}" \
    --set secrets.cert_manager.external.sectigo_acme.email="{{ sectigo_acme_email }}" \
    --set secrets.cert_manager.external.sectigo_acme.tls_key="{{ sectigo_acme_tls_key }}"
    --set metallb.ipaddresspool.poolname="{{ item.item }}-pool"
    --set metallb.ipaddresspool.ipaddress="{{ loadbalancer_ip }}"
    --set metallb.l2advertisement.advname="{{ item.item }}-adv"
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
  no_log: True
#---------------------------------------------------------

# Install Ingress Nginx
#---------------------------------------------------------
- name: "Install Ingress Nginx helm chart on cluster: {{ item.item }}"
  shell: >
    helm repo add ingress-nginx "{{ ingress_nginx_repo }}"
    helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --namespace ingress-nginx --create-namespace 
    --set 'controller.ingressClassResource.default=true'
  environment:
    KUBECONFIG: "{{ kubeconfig_dir }}/kubeconfig_{{ item.item }}"
#---------------------------------------------------------
